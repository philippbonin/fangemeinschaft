# Project Structure and Testing Documentation

## Project Configuration Files

### astro.config.mjs
- **Purpose**: Configures Astro framework settings
- **Key Features**:
  - Server-side rendering (SSR) configuration
  - Integration with React and Tailwind
  - Node.js adapter configuration
  - Build timestamp injection
  - Documentation copying to output directory

### jest.config.js
- **Purpose**: Jest testing framework configuration
- **Key Features**:
  - TypeScript support with ts-jest
  - ESM module support
  - React JSX support
  - Test environment configuration
  - Coverage reporting setup

### jest.setup.js & jest.setup.ts
- **Purpose**: Test environment initialization
- **Features**:
  - Jest DOM extensions
  - Global fetch mocking
  - Console error handling
  - Test environment customization

### tailwind.config.mjs
- **Purpose**: Tailwind CSS configuration
- **Key Features**:
  - Custom color scheme
  - Font configuration
  - Plugin integration (forms, typography)
  - Content paths for purging

### tsconfig.json
- **Purpose**: TypeScript configuration
- **Key Features**:
  - React JSX support
  - Module resolution settings
  - Strict type checking
  - Path aliases
  - Test type definitions

## Testing System

### Test Directory Structure
```
tests/
├── api/              # API endpoint tests
│   ├── auth.test.ts
│   ├── news.test.ts
│   ├── matches.test.ts
│   └── ...
├── a11y/             # Accessibility tests
│   └── index.test.ts
├── journeys/         # User journey tests
│   ├── admin.test.ts
│   ├── index.test.ts
│   └── personas.ts
├── setup.ts          # Test configuration
└── helpers.ts        # Test utilities
```

### API Tests
- Located in `tests/api/`
- Test all API endpoints
- Use Prisma mocking
- Cover CRUD operations
- Validate responses
- Test error handling

Example API test:
```typescript
describe('News API', () => {
  test('should create news', async () => {
    const news = await createNews({
      title: 'Test',
      content: 'Content'
    });
    expect(news).toHaveProperty('id');
  });
});
```

### Accessibility Tests
- Located in `tests/a11y/`
- Use axe-core for testing
- Check WCAG compliance
- Test all public pages
- Validate user interactions

Example accessibility test:
```typescript
test('pages should be accessible', async () => {
  const results = await runAccessibilityTest('/');
  expect(results.violations).toEqual([]);
});
```

### User Journey Tests
- Located in `tests/journeys/`
- Test complete user flows
- Use Puppeteer for browser automation
- Cover critical paths
- Test different user personas

Example journey test:
```typescript
test('admin can create news', async () => {
  await loginAsAdmin();
  await createNewsArticle();
  expect(page.url()).toContain('/admin/news');
});
```

### Test Setup
- Located in `tests/setup.ts`
- Configures test environment
- Sets up mocks
- Initializes test database
- Configures test utilities

Example setup:
```typescript
beforeEach(() => {
  mockReset(prismaMock);
});

afterAll(async () => {
  await prisma.$disconnect();
});
```

## Running Tests

### Command Overview
```bash
# Run all tests
npm run test

# Run specific test suites
npm run test:api      # API tests only
npm run test:a11y     # Accessibility tests
npm run test:watch    # Watch mode

# Generate coverage report
npm run test -- --coverage
```

### Test Coverage Requirements
- Statements: 80%
- Branches: 80%
- Functions: 80%
- Lines: 80%

## Best Practices

### Writing Tests
1. Follow AAA pattern (Arrange, Act, Assert)
2. Use descriptive test names
3. Test edge cases
4. Mock external dependencies
5. Clean up after tests

### API Testing
1. Test success cases
2. Test error cases
3. Validate responses
4. Check authentication
5. Test rate limiting

### Accessibility Testing
1. Test keyboard navigation
2. Check ARIA attributes
3. Validate color contrast
4. Test screen reader support
5. Check focus management

### User Journey Testing
1. Test critical paths
2. Validate user flows
3. Check error handling
4. Test responsive design
5. Validate form submissions

## Continuous Integration

The testing system integrates with CI/CD:

```yaml
name: Tests
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test
      - name: Upload coverage
        uses: codecov/codecov-action@v2
```

## Extending the Test Suite

### Adding New Tests
1. Create test file in appropriate directory
2. Import required utilities
3. Write test cases
4. Add to test suite
5. Update documentation

### Creating Test Utilities
1. Add to `tests/helpers.ts`
2. Write reusable functions
3. Add TypeScript types
4. Document usage
5. Add examples

### Modifying Test Configuration
1. Update `jest.config.js`
2. Modify `jest.setup.ts`
3. Update test commands
4. Document changes
5. Update CI configuration


The request-response flow in the project, focusing on the middleware and library structure.

Request-Response Flow
Initial Request Entry When a request comes in, it follows this path:

Request → Nginx → Astro Server → Route Handler → Response
Middleware Chain The request goes through several middleware layers:

Request
  ↓
1. Authentication Middleware (src/lib/auth.ts)
  ↓
2. Validation Middleware (src/middleware/validation.ts)
  ↓
3. Rate Limiting (src/middleware/rateLimit.ts)
  ↓
4. Error Handler (src/middleware/errorHandler.ts)
  ↓
Route Handler
Library Structure The src/lib/ directory contains core functionality:

src/lib/
├── auth.ts         # Authentication logic
├── prisma.ts       # Database client & middleware
├── validation.ts   # Data validation schemas
├── errors.ts       # Error handling
├── middleware.ts   # Prisma middleware
├── cache.ts        # Caching functionality
└── openapi.ts      # API documentation
Here's a typical flow for an authenticated API request:


// 1. Request hits API endpoint
// src/pages/api/news/index.ts
export const POST: APIRoute = async ({ request, redirect }) => {
  try {
    // 2. Authentication check
    if (!await isAuthenticated(request)) {
      return new Response('Unauthorized', { status: 401 });
    }

    // 3. Request validation
    const formData = await request.formData();
    const validatedData = await validateData(newsSchema, formData);

    // 4. Database operation
    const result = await prisma.news.create({
      data: validatedData
    });

    // 5. Response
    return redirect('/admin/news');
  } catch (error) {
    // 6. Error handling
    handleError(error);
  }
};
The middleware system provides several layers of functionality:

Authentication Middleware (src/lib/auth.ts):

export async function isAuthenticated(request: Request): Promise<boolean> {
  const token = request.headers.get('Authorization')?.replace('Bearer ', '');
  if (!token) return false;

  const payload = await verifyToken(token);
  return !!payload;
}
Validation Middleware (src/middleware/validation.ts):

export function validateRequest<T>(schema: z.ZodSchema<T>) {
  return (handler: APIRoute): APIRoute => {
    return async (context) => {
      try {
        const data = await context.request.formData();
        const validatedData = await schema.parseAsync(Object.fromEntries(data));
        context.locals.validatedData = validatedData;
        return handler(context);
      } catch (error) {
        if (error instanceof z.ZodError) {
          return new Response(JSON.stringify({
            error: 'Validation failed',
            issues: error.issues
          }), { status: 400 });
        }
        throw error;
      }
    };
  };
}
Error Handler (src/middleware/errorHandler.ts):

export function withErrorHandler(handler: APIRoute): APIRoute {
  return async (context) => {
    try {
      return await handler(context);
    } catch (error) {
      // Handle different types of errors
      if (error instanceof ValidationError) {
        return new Response(JSON.stringify({
          error: 'Validation Error',
          details: error.issues
        }), { status: 400 });
      }
      // ... handle other error types
    }
  };
}
Database Middleware (src/lib/prisma.ts):

// Logging middleware
prisma.$use(async (params, next) => {
  const start = performance.now();
  const result = await next(params);
  const duration = performance.now() - start;
  
  if (duration > 100) {
    console.warn(`Slow query in ${params.model}.${params.action}`);
  }
  
  return result;
});
This layered approach ensures:

Secure authentication
Data validation
Error handling
Performance monitoring
Audit logging
Rate limiting
Each request goes through these layers before reaching the actual route handler, providing a robust and secure request-response pipeline.

Request-Response Flow
Initial Request Flow

Request → Nginx → Astro Server → Middleware Chain → Route Handler → Response
Middleware Chain The request goes through several middleware layers in src/middleware/:

Request
  ↓
1. Validation Middleware (validation.ts)
  ↓ 
2. Error Handler (errorHandler.ts)
  ↓
3. Rate Limit (rateLimit.ts)
  ↓
Route Handler
Library Structure The src/lib/ directory contains core functionality:

src/lib/
├── auth.ts         # Authentication logic
├── prisma.ts       # Database client & middleware
├── validation.ts   # Data validation schemas
├── errors.ts       # Error handling
├── middleware.ts   # Prisma middleware
├── cache.ts        # Caching functionality
└── openapi.ts      # API documentation
Here's a typical flow for an API request:


// 1. Request hits API endpoint
// src/pages/api/news/index.ts
export const POST: APIRoute = async ({ request, redirect }) => {
  try {
    // 2. Validation middleware checks request data
    const formData = await request.formData();
    const validatedData = await validateData(newsSchema, formData);

    // 3. Database operation with Prisma middleware
    const result = await prisma.news.create({
      data: validatedData
    });

    // 4. Response
    return redirect('/admin/news');
  } catch (error) {
    // 5. Error handler middleware catches and formats errors
    return handleError(error);
  }
};
The middleware system provides several layers of functionality:

Validation Middleware (src/middleware/validation.ts):

export function validateRequest<T>(schema: z.ZodSchema<T>) {
  return (handler: APIRoute): APIRoute => {
    return async (context) => {
      try {
        const data = await context.request.formData();
        const validatedData = await schema.parseAsync(Object.fromEntries(data));
        context.locals.validatedData = validatedData;
        return handler(context);
      } catch (error) {
        if (error instanceof z.ZodError) {
          return new Response(JSON.stringify({
            error: 'Validation failed',
            issues: error.issues
          }), { status: 400 });
        }
        throw error;
      }
    };
  };
}
Error Handler Middleware (src/middleware/errorHandler.ts):

export function withErrorHandler(handler: APIRoute): APIRoute {
  return async (context) => {
    try {
      return await handler(context);
    } catch (error) {
      if (error instanceof ValidationError) {
        return new Response(JSON.stringify({
          error: 'Validation Error',
          details: error.issues
        }), { status: 400 });
      }
      // Handle other error types...
    }
  };
}
Rate Limit Middleware (src/middleware/rateLimit.ts):

export function withRateLimit(limit: number, window: number) {
  return async (params: any, next: (params: any) => Promise<any>) => {
    const key = `ratelimit:${params.model}:${params.action}`;
    const current = await getCache<number>(key) || 0;
    
    if (current >= limit) {
      throw new Error('Rate limit exceeded');
    }
    
    await setCache(key, current + 1, window);
    return next(params);
  };
}
Prisma Middleware (src/lib/prisma.ts):

// Logging middleware
prisma.$use(async (params, next) => {
  const start = performance.now();
  const result = await next(params);
  const duration = performance.now() - start;
  
  if (duration > 100) {
    console.warn(`Slow query in ${params.model}.${params.action}`);
  }
  
  return result;
});

// Audit logging middleware
prisma.$use(async (params, next) => {
  const before = params.action === 'update' ? 
    await prisma[params.model].findUnique({ where: params.args.where }) : 
    null;
    
  const result = await next(params);
  
  await prisma.auditLog.create({
    data: {
      model: params.model,
      action: params.action,
      before,
      after: result
    }
  });
  
  return result;
});

This layered approach ensures:

Request validation
Error handling
Rate limiting
Query logging
Audit logging
Performance monitoring
Each request goes through these layers before reaching the actual route handler, providing a robust and secure request-response pipeline.

🚀 Final Working Authentication Flow
✅ Login:

User submits email & password
createSession() validates credentials & returns JWT
JWT is stored in HTTP-only cookie (admin-token)
✅ Authentication Middleware:

Requests extract token from Authorization header or cookies
Middleware validates token before executing Prisma operations
If invalid, user gets 401 Unauthorized
✅ Rate Limiting:

Extracts user token for rate tracking
Limits requests per hour
Blocks user if they exceed the limit