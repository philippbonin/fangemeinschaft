---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { isAuthenticated } from '../../../utils/auth';
import { getAssets } from '../../../utils/assets';

const authenticated = await isAuthenticated(Astro);

if (!authenticated) {
  return Astro.redirect('/admin/login');
}

// Get assets from database
const assets = await getAssets();
console.log('Loaded assets:', assets); // Debug log

const categories = ['Team News', 'Match Report', 'Club News', 'Press Release'];
const imageAssets = assets.filter(asset => asset.mime_type.startsWith('image/'));
---

<AdminLayout title="News erstellen">
  <div class="p-6">
    <div class="mb-8 flex items-center justify-between">
      <h1 class="text-2xl font-bold">News erstellen</h1>
      <a 
        href="/admin/news" 
        class="text-gray-600 hover:text-secondary flex items-center space-x-1"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        <span>Zurück</span>
      </a>
    </div>

    <div class="bg-white rounded-lg shadow-sm">
      <form action="/api/news" method="POST" class="p-6">
        <div class="space-y-6">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1" for="title">
              Titel
            </label>
            <input
              type="text"
              id="title"
              name="title"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-secondary focus:border-transparent"
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1" for="category">
              Kategorie
            </label>
            <select
              id="category"
              name="category"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-secondary focus:border-transparent"
            >
              <option value="">Bitte wählen</option>
              {categories.map((category) => (
                <option value={category}>{category}</option>
              ))}
            </select>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">
              Bild
            </label>
            <div class="mb-4">
              <div class="w-full h-48 bg-gray-100 rounded-lg overflow-hidden">
                <img id="selectedImage" src="" alt="" class="w-full h-full object-cover hidden" />
                <div id="placeholderText" class="w-full h-full flex items-center justify-center text-gray-400">
                  Bitte wählen Sie ein Bild aus
                </div>
              </div>
            </div>
            <input type="hidden" id="image" name="image" required />
            
            <div class="grid grid-cols-4 gap-4 mt-4 max-h-60 overflow-y-auto p-2 bg-gray-50 rounded-lg">
              {imageAssets.map((asset) => (
                <button
                  type="button"
                  class="image-select-btn relative aspect-square bg-white rounded-lg overflow-hidden border-2 border-transparent hover:border-secondary transition-colors"
                  data-url={asset.url}
                >
                  <img src={asset.url} alt={asset.name} class="w-full h-full object-cover" />
                  <div class="absolute top-1 right-1 bg-secondary text-white rounded-full p-0.5 hidden">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                  </div>
                </button>
              ))}
            </div>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1" for="content">
              Inhalt
            </label>
            <textarea
              id="content"
              name="content"
              rows="10"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-secondary focus:border-transparent"
            ></textarea>
          </div>

          <div class="flex justify-end space-x-4">
            <a 
              href="/admin/news"
              class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors"
            >
              Abbrechen
            </a>
            <button
              type="submit"
              class="bg-secondary text-white px-4 py-2 rounded-md hover:bg-secondary/90 transition-colors"
            >
              Speichern
            </button>
          </div>
        </div>
      </form>
    </div>
  </div>
</AdminLayout>

<script>
  // Image selection functionality
  const imageInput = document.getElementById('image') as HTMLInputElement;
  const selectedImage = document.getElementById('selectedImage') as HTMLImageElement;
  const placeholderText = document.getElementById('placeholderText');
  const imageButtons = document.querySelectorAll('.image-select-btn');

  imageButtons.forEach(button => {
    button.addEventListener('click', () => {
      const url = button.getAttribute('data-url');
      if (url && imageInput && selectedImage && placeholderText) {
        // Update hidden input and preview
        imageInput.value = url;
        selectedImage.src = url;
        selectedImage.classList.remove('hidden');
        placeholderText.classList.add('hidden');

        // Update selected state
        imageButtons.forEach(btn => {
          const checkmark = btn.querySelector('div');
          if (btn === button) {
            btn.classList.add('border-secondary');
            if (checkmark) checkmark.classList.remove('hidden');
          } else {
            btn.classList.remove('border-secondary');
            if (checkmark) checkmark.classList.add('hidden');
          }
        });
      }
    });
  });
</script>