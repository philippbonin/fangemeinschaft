---
import { getSettings } from '../utils/settings';

const settings = await getSettings();

// Only show if enabled in settings
if (!settings.buildLabelEnabled) return null;

// Initialize with default values
const defaultBuildInfo = { timestamp: 'unknown', buildName: 'unnamed' };

// Define a list of vibrant colors with good contrast for text
const colors = [
  '#39FF14', // Neon Green
  '#FF3366', // Hot Pink
  '#00FFFF', // Cyan
  '#FFD700', // Gold
  '#FF6B6B', // Coral
  '#4D4DFF', // Blue
  '#FF1493', // Deep Pink
  '#32CD32', // Lime Green
  '#FF4500', // Orange Red
  '#9370DB', // Medium Purple
];

// Generate a consistent color based on the build name
function getColorForBuild(buildName: string) {
  // Sum the character codes of the build name to get a consistent number
  const sum = buildName.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);
  // Use the sum to select a color from the array
  return colors[sum % colors.length];
}
---

<div 
  id="buildLabel" 
  class="fixed top-4 left-4 px-3 py-1.5 rounded-md text-black text-sm z-50 backdrop-blur-sm hidden"
  data-colors={JSON.stringify(colors)}
>
  <div class="flex items-center space-x-2">
    <span id="buildTimestamp" class="font-mono">{defaultBuildInfo.timestamp}</span>
    <span class="text-black/60">|</span>
    <span id="buildName" class="font-medium">{defaultBuildInfo.buildName}</span>
  </div>
</div>

<script>
  // Fetch build info on the client side
  async function loadBuildInfo() {
    try {
      const response = await fetch('/build-info.json');
      if (response.ok) {
        const buildInfo = await response.json();
        
        // Update DOM elements
        const label = document.getElementById('buildLabel');
        const timestamp = document.getElementById('buildTimestamp');
        const name = document.getElementById('buildName');
        
        if (label && timestamp && name) {
          // Get colors array from data attribute
          const colors = JSON.parse(label.dataset.colors || '[]');
          
          // Generate color based on build name
          const sum = buildInfo.buildName.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);
          const color = colors[sum % colors.length];
          
          // Apply styles
          label.style.backgroundColor = `${color}90`; // 90 for 90% opacity
          
          // Update content
          timestamp.textContent = buildInfo.timestamp;
          name.textContent = buildInfo.buildName;
          
          // Show the label
          label.classList.remove('hidden');
        }
      }
    } catch (error) {
      console.error('Failed to load build info:', error);
    }
  }

  // Load build info when the component mounts
  loadBuildInfo();
</script>