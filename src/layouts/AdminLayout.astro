---
import { isAuthenticated } from '../lib/auth';
import AdminBuildLabel from '../components/AdminBuildLabel.astro';

interface Props {
  title: string;
}

const { title } = Astro.props;
const authenticated = await isAuthenticated(Astro.request);

if (!authenticated) {
  return Astro.redirect('/admin/login');
}

const navigation = [
  { 
    name: 'Dashboard', 
    href: '/admin', 
    icon: 'M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6'
  },
  {
    name: 'News',
    href: '/admin/news',
    icon: 'M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9.5a2 2 0 00-2-2h-2',
    actions: [
      { name: 'Alle News', href: '/admin/news' },
      { name: 'News erstellen', href: '/admin/news/create' }
    ]
  },
  {
    name: 'Spiele',
    href: '/admin/matches',
    icon: 'M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z',
    actions: [
      { name: 'Alle Spiele', href: '/admin/matches' },
      { name: 'Spiel erstellen', href: '/admin/matches/create' },
      { name: 'Nächstes Spiel', href: '/admin/next-match/edit' }
    ]
  },
  {
    name: 'Mannschaft',
    href: '/admin/team',
    icon: 'M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z',
    actions: [
      { name: 'Alle Spieler', href: '/admin/team' },
      { name: 'Spieler erstellen', href: '/admin/team/create' }
    ]
  },
  {
    name: 'Aufstellung',
    href: '/admin/formation',
    icon: 'M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z',
    actions: [
      { name: 'Alle Aufstellungen', href: '/admin/formation' },
      { name: 'Aufstellung erstellen', href: '/admin/formation/create' }
    ]
  },
  {
    name: 'Fanclubs',
    href: '/admin/fanclubs',
    icon: 'M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z',
    actions: [
      { name: 'Alle Fanclubs', href: '/admin/fanclubs' },
      { name: 'Fanclub erstellen', href: '/admin/fanclubs/create' }
    ]
  },
  {
    name: 'Assets',
    href: '/admin/assets',
    icon: 'M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z',
    actions: [
      { name: 'Alle Assets', href: '/admin/assets' },
      { name: 'Asset hochladen', href: '/admin/assets/upload' }
    ]
  },
  {
    name: 'System',
    href: '/admin/health',
    icon: 'M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z',
    actions: [
      { name: 'System Status', href: '/admin/health' },
      { name: 'Dokumentation', href: '/admin/documentation' },
      { name: 'Einstellungen', href: '/admin/settings' }
    ]
  }
];

const currentPath = Astro.url.pathname;

// Function to check if a menu item should be expanded
const shouldExpandMenu = (item: typeof navigation[0]) => {
  if (!item.actions) return false;
  return item.actions.some(action => currentPath === action.href) || currentPath === item.href;
};
---

<!doctype html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Admin Dashboard" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/admin-favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title} - Admin</title>
  </head>
  <body class="min-h-screen bg-gray-50">
    <AdminBuildLabel />
    <div class="flex h-screen">
      <!-- Sidebar -->
      <div class="hidden md:flex md:flex-shrink-0">
        <div class="flex flex-col w-64">
          <div class="flex flex-col flex-grow pt-5 pb-4 overflow-y-auto bg-white border-r">
            <div class="flex items-center flex-shrink-0 px-4">
              <span class="text-xl font-bold text-primary">Admin</span>
            </div>
            <div class="mt-5 flex-grow flex flex-col">
              <nav class="flex-1 px-2 space-y-1">
                {navigation.map((item) => {
                  const isActive = currentPath === item.href || currentPath.startsWith(item.href + '/');
                  const isExpanded = shouldExpandMenu(item);
                  return (
                    <div class="space-y-1">
                      <a
                        href={item.href}
                        class:list={[
                          'group flex items-center px-2 py-2 text-sm font-medium rounded-md',
                          isActive || isExpanded
                            ? 'bg-gray-100 text-secondary'
                            : 'text-gray-600 hover:bg-gray-50 hover:text-secondary',
                        ]}
                      >
                        <svg
                          class:list={[
                            'mr-3 flex-shrink-0 h-6 w-6',
                            isActive || isExpanded ? 'text-secondary' : 'text-gray-400 group-hover:text-secondary',
                          ]}
                          xmlns="http://www.w3.org/2000/svg"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke="currentColor"
                          aria-hidden="true"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d={item.icon}
                          />
                        </svg>
                        {item.name}
                      </a>
                      {item.actions && isExpanded && (
                        <div class="pl-10 space-y-1">
                          {item.actions.map((action) => (
                            <a
                              href={action.href}
                              class:list={[
                                'group flex items-center px-2 py-1 text-sm rounded-md',
                                currentPath === action.href
                                  ? 'text-secondary font-medium'
                                  : 'text-gray-600 hover:text-secondary',
                              ]}
                            >
                              {action.name}
                            </a>
                          ))}
                        </div>
                      )}
                    </div>
                  );
                })}
              </nav>
            </div>
            <div class="flex-shrink-0 border-t border-gray-200">
              <!-- Live System Link -->
              <a
                href="/"
                class="flex items-center px-4 py-3 text-sm text-gray-600 hover:text-secondary border-b border-gray-200"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                </svg>
                Live System öffnen
              </a>
              <!-- Logout Button -->
              <form action="/api/auth/logout" method="POST" class="p-4">
                <button type="submit" class="text-gray-600 hover:text-secondary text-sm w-full text-left">
                  Abmelden
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>

      <!-- Main content -->
      <div class="flex flex-col w-0 flex-1 overflow-hidden">
        <main class="flex-1 relative overflow-y-auto focus:outline-none">
          <slot />
        </main>
      </div>
    </div>
  </body>
</html>